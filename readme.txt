Considerazioni esercizio vue:
Sono consapevole l'esercizio fosse incentrato sull'utilizzo di Vue per sviluppare il front-end dell' applicazione, quindi mi sono attenuto alla richiesta, ma se avessi fatto un progetto in full-stack "realistico" avrei probabilmente integrato un leggero back-end attraverso PHP che comunica con una piccola tabella di un database (o forse due, una per gli utenti, l'altra per i task), come MySQL ad esempio, per fetchare i dati degli utenti, in modo da poter mostrare poi, all'occorrenza, i to-do di un solo utente.
Non essendo questo lo scopo dell'esercizio ho optato per Localbase, un database locale che altro non è che una "versione più facilmente accessibile ed utilizzabile" di IndexedDB, è un package facilmente installabile tramite npm; tutte le dipendenze sono già specificate nei fiel json, quindi, come scritto anche nel README.md, per fare il setup basta eseguire il comando npm install.
Come avete giustamente detto voi, la pagina di login implementata è "finta" (non si vanno né a validare, né a recuperare dati da DB esterni), e quindi non verrà eseguita una vera e propria query di select, piuttosto si itererà in locale sui vari task, per mostrare solo quelli che ci interessano.
Aggiungo che ho controllato "lato client" che il nome inserito nella pagina di "log-in" non sia vuoto, ma appunto è solo un controllo lato client e nella applicazione finale dovremmo per forza di cose validare tutti gli input lato server per evitare comportamenti indesiderati.
Concludo specificando, come ho fatto anche attraverso un commento nell'opportuno file, che ho dovuto usare una API "non ufficiale" per i fumetti di xkcd perché, per qualche motivo, quella ufficiale causava errori di Axios (forse per problemi legati a CORS).